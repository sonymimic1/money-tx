// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"log"
	"reflect"
	"testing"
	
)
const (
	MYSQL_USER         = "root"
	MYSQL_PASSWORD     = "123456"
	MYSQL_ADDRESS      = "127.0.0.1"
	MYSQL_ADDRESS_PORT = "330"
	MYSQL_DB           = "transferDB"
)


func TestQueries_CreateAccount(t *testing.T) {


	if testQueries==nil{
		log.Fatal("connot connect to db.")
	}else{
		log.Printf("connect ok!")
		
	}
	return
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		arg CreateAccountParams
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    sql.Result
		wantErr bool
	}{
		// TODO: Add test cases.
		{
			name: "",
			fields: fields{db:testQueries.db},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := &Queries{
				db: tt.fields.db,
			}
			got, err := q.CreateAccount(tt.args.ctx, tt.args.arg)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.CreateAccount() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.CreateAccount() = %v, want %v", got, tt.want)
			}
		})
	}
}
